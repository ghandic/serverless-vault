diff --git a/Cargo.toml b/Cargo.toml
index 2542e3c6..3d54bbbe 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -59,6 +59,9 @@ num-traits = "0.2.19"
 num-derive = "0.4.2"
 bigdecimal = "0.4.7"
 
+# Lambda compatibility
+lambda-web = { version = "0.2.0", features=["rocket05"] }
+
 # Web framework
 rocket = { version = "0.5.1", features = ["tls", "json"], default-features = false }
 rocket_ws = { version ="0.1.1" }
diff --git a/src/main.rs b/src/main.rs
index 530c7b2c..1d6972f9 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -64,11 +64,12 @@ use crate::api::{WS_ANONYMOUS_SUBSCRIPTIONS, WS_USERS};
 pub use config::CONFIG;
 pub use error::{Error, MapResult};
 use rocket::data::{Limits, ToByteUnit};
+use lambda_web::{is_running_on_lambda, launch_rocket_on_lambda, LambdaError};
 use std::sync::{atomic::Ordering, Arc};
 pub use util::is_running_in_container;
 
 #[rocket::main]
-async fn main() -> Result<(), Error> {
+async fn main() -> Result<(), LambdaError> {
     parse_args().await;
     launch_info();
 
@@ -558,7 +559,7 @@ async fn create_db_pool() -> db::DbPool {
     }
 }
 
-async fn launch_rocket(pool: db::DbPool, extra_debug: bool) -> Result<(), Error> {
+async fn launch_rocket(pool: db::DbPool, extra_debug: bool) -> Result<(), LambdaError> {
     let basepath = &CONFIG.domain_path();
 
     let mut config = rocket::Config::from(rocket::Config::figment());
@@ -615,7 +616,13 @@ async fn launch_rocket(pool: db::DbPool, extra_debug: bool) -> Result<(), Error>
         });
     }
 
-    instance.launch().await?;
+    if is_running_on_lambda() {
+        // Launch on AWS Lambda
+        launch_rocket_on_lambda(instance).await?;
+    } else {
+        // Launch local server
+        instance.launch().await?;
+    }
 
     info!("Vaultwarden process exited!");
     Ok(())
